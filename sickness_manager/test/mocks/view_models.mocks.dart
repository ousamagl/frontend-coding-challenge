// Mocks generated by Mockito 5.4.5 from annotations
// in sickness_manager/test/mocks/view_models.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter/foundation.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sickness_manager/app/core/common/enums.dart' as _i6;
import 'package:sickness_manager/app/features/absences/view_model/absences_state.dart'
    as _i4;
import 'package:sickness_manager/app/features/absences/view_model/absences_view_model.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValueListenable_0<T> extends _i1.SmartFake
    implements _i2.ValueListenable<T> {
  _FakeValueListenable_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AbsencesViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbsencesViewModel extends _i1.Mock implements _i3.AbsencesViewModel {
  @override
  _i2.ValueListenable<_i4.AbsencesState> get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeValueListenable_0<_i4.AbsencesState>(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub:
                _FakeValueListenable_0<_i4.AbsencesState>(
                  this,
                  Invocation.getter(#state),
                ),
          )
          as _i2.ValueListenable<_i4.AbsencesState>);

  @override
  void init() => super.noSuchMethod(
    Invocation.method(#init, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> moveToNextPage() =>
      (super.noSuchMethod(
            Invocation.method(#moveToNextPage, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> moveToPreviousPage() =>
      (super.noSuchMethod(
            Invocation.method(#moveToPreviousPage, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> filterAbsences({
    _i6.AbsenceType? type,
    _i6.AbsenceStatus? status,
    DateTime? startDate,
    DateTime? endDate,
    int? memberId,
    int? crewId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#filterAbsences, [], {
              #type: type,
              #status: status,
              #startDate: startDate,
              #endDate: endDate,
              #memberId: memberId,
              #crewId: crewId,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> clearFilters() =>
      (super.noSuchMethod(
            Invocation.method(#clearFilters, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void clear() => super.noSuchMethod(
    Invocation.method(#clear, []),
    returnValueForMissingStub: null,
  );
}
