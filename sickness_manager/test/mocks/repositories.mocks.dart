// Mocks generated by Mockito 5.4.5 from annotations
// in sickness_manager/test/mocks/repositories.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sickness_manager/app/core/common/enums.dart' as _i7;
import 'package:sickness_manager/app/core/common/types/result.dart' as _i2;
import 'package:sickness_manager/app/domain/models/absence.dart' as _i4;
import 'package:sickness_manager/app/domain/models/member.dart' as _i5;
import 'package:sickness_manager/app/domain/repositories/absences_repo.dart'
    as _i3;
import 'package:sickness_manager/app/domain/repositories/user_repo.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AbsencesRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbsencesRepo extends _i1.Mock implements _i3.AbsencesRepo {
  @override
  List<_i4.Absence?> get absences =>
      (super.noSuchMethod(
            Invocation.getter(#absences),
            returnValue: <_i4.Absence?>[],
            returnValueForMissingStub: <_i4.Absence?>[],
          )
          as List<_i4.Absence?>);

  @override
  List<_i5.Member?> get members =>
      (super.noSuchMethod(
            Invocation.getter(#members),
            returnValue: <_i5.Member?>[],
            returnValueForMissingStub: <_i5.Member?>[],
          )
          as List<_i5.Member?>);

  @override
  int get absencesCount =>
      (super.noSuchMethod(
            Invocation.getter(#absencesCount),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  _i6.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i2.Result<List<_i4.Absence?>>> getMoreAbsences({
    _i7.AbsenceType? type,
    _i7.AbsenceStatus? status,
    int? memberId,
    int? crewId,
    DateTime? startDate,
    DateTime? endDate,
    bool? isRefresh = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getMoreAbsences, [], {
              #type: type,
              #status: status,
              #memberId: memberId,
              #crewId: crewId,
              #startDate: startDate,
              #endDate: endDate,
              #isRefresh: isRefresh,
            }),
            returnValue: _i6.Future<_i2.Result<List<_i4.Absence?>>>.value(
              _FakeResult_0<List<_i4.Absence?>>(
                this,
                Invocation.method(#getMoreAbsences, [], {
                  #type: type,
                  #status: status,
                  #memberId: memberId,
                  #crewId: crewId,
                  #startDate: startDate,
                  #endDate: endDate,
                  #isRefresh: isRefresh,
                }),
              ),
            ),
            returnValueForMissingStub:
                _i6.Future<_i2.Result<List<_i4.Absence?>>>.value(
                  _FakeResult_0<List<_i4.Absence?>>(
                    this,
                    Invocation.method(#getMoreAbsences, [], {
                      #type: type,
                      #status: status,
                      #memberId: memberId,
                      #crewId: crewId,
                      #startDate: startDate,
                      #endDate: endDate,
                      #isRefresh: isRefresh,
                    }),
                  ),
                ),
          )
          as _i6.Future<_i2.Result<List<_i4.Absence?>>>);

  @override
  _i6.Future<int> getAbsencesCount() =>
      (super.noSuchMethod(
            Invocation.method(#getAbsencesCount, []),
            returnValue: _i6.Future<int>.value(0),
            returnValueForMissingStub: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  void clear() => super.noSuchMethod(
    Invocation.method(#clear, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [UserRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepo extends _i1.Mock implements _i8.UserRepo {
  @override
  _i6.Future<_i2.Result<String?>> login({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#login, [], {
              #username: username,
              #password: password,
            }),
            returnValue: _i6.Future<_i2.Result<String?>>.value(
              _FakeResult_0<String?>(
                this,
                Invocation.method(#login, [], {
                  #username: username,
                  #password: password,
                }),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Result<String?>>.value(
              _FakeResult_0<String?>(
                this,
                Invocation.method(#login, [], {
                  #username: username,
                  #password: password,
                }),
              ),
            ),
          )
          as _i6.Future<_i2.Result<String?>>);

  @override
  _i6.Future<bool> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i6.Future<bool>.value(false),
            returnValueForMissingStub: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(
            Invocation.method(#isLoggedIn, []),
            returnValue: _i6.Future<bool>.value(false),
            returnValueForMissingStub: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);
}
