include: package:flutter_lints/flutter.yaml

analyzer:
  exclude:
    - lib/**/*.g.dart
    - lib/*.g.dart
  errors:
    require_trailing_commas: ignore # This is handled by dart_style. Set it to warning once dart_style supports it.

linter:
  rules:
    - always_use_package_imports
    - prefer_adjacent_string_concatenation
    - use_named_constants
    - avoid_final_parameters
    - unnecessary_constructor_name
    - avoid_empty_else
    - constant_identifier_names
    - eol_at_end_of_file
    - no_duplicate_case_values
    - prefer_constructors_over_static_methods
    - avoid_escaping_inner_quotes
    - avoid_multiple_declarations_per_line
    - require_trailing_commas

    # https://dart-lang.github.io/linter/lints/camel_case_types.html
    - camel_case_types

    # Remove unnecessary braces
    # https://dart-lang.github.io/linter/lints/unnecessary_brace_in_string_interps.html
    - unnecessary_brace_in_string_interps

    # Don't explicitly set defaults
    # Dart SDK: >= 2.8.0-dev.1.0 • (Linter v0.1.107)
    # https://dart-lang.github.io/linter/lints/avoid_redundant_argument_values.html
    - avoid_redundant_argument_values

    # Prevents accidental return type changes which results in a breaking API change.
    # Enforcing return type makes API changes visible in a diff
    # http://dart-lang.github.io/linter/lints/always_declare_return_types.html
    - always_declare_return_types

    # Flutter widgets always put a Key as first optional parameter which breaks this rule.
    # Also violates other orderings like matching the class fields or alphabetically.
    # http://dart-lang.github.io/linter/lints/always_declare_return_types.html
    - always_put_required_named_parameters_first

    # Protect against unintentionally overriding superclass members
    # http://dart-lang.github.io/linter/lints/annotate_overrides.html
    - annotate_overrides

    # Prevents unnecessary allocation of a field
    # http://dart-lang.github.io/linter/lints/avoid_field_initializers_in_const_classes.html
    - avoid_field_initializers_in_const_classes

    # Prevents allocating a lambda and allows return/break/continue control flow statements inside the loop
    # Dart SDK: >= 2.0.0 • (Linter v0.1.30)
    # http://dart-lang.github.io/linter/lints/avoid_function_literals_in_foreach_calls.html
    - avoid_function_literals_in_foreach_calls

    # Don't break value types by implementing them
    # http://dart-lang.github.io/linter/lints/avoid_implementing_value_types.html
    - avoid_implementing_value_types

    # Removes redundant `= null;`
    # https://dart-lang.github.io/linter/lints/avoid_init_to_null.html
    - avoid_init_to_null

    # Null checks aren't required in ==() operators
    # https://dart-lang.github.io/linter/lints/avoid_null_checks_in_equality_operators.html
    - avoid_null_checks_in_equality_operators

    # Setters always return void, therefore defining void is redundant
    # https://dart-lang.github.io/linter/lints/avoid_return_types_on_setters.html
    - avoid_return_types_on_setters

    # Don't use a parameter names which can be confused with a types (i.e. int, bool, num, ...)
    # https://dart-lang.github.io/linter/lints/avoid_types_as_parameter_names.html
    - avoid_types_as_parameter_names

    # Unused parameters should be removed
    # https://dart-lang.github.io/linter/lints/avoid_unused_constructor_parameters.html
    - avoid_unused_constructor_parameters

    # For async functions use `Future<void>` as return value, not `void`
    # This allows usage of the await keyword and prevents operations from running in parallel.
    #
    # https://dart-lang.github.io/linter/lints/avoid_void_async.html
    - avoid_void_async

    # https://dart-lang.github.io/linter/lints/sort_constructors_first.html
    - sort_constructors_first
